use pizza;

-- 1. Total revenue generated by the pizza store
SELECT ROUND(SUM(od.quantity * p.price), 2) AS total_revenue
FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id;

-- 2. Monthly revenue trends
SELECT 
    DATE_FORMAT(o.date, '%Y-%m') AS month,
    ROUND(SUM(od.quantity * p.price), 2) AS monthly_revenue
FROM order_details od
JOIN orders o ON od.order_id = o.order_id
JOIN pizzas p ON od.pizza_id = p.pizza_id
GROUP BY month
ORDER BY month;

-- 3. Top 5 most ordered pizzas by quantity
SELECT 
    pt.name AS pizza_name,
    SUM(od.quantity) AS total_quantity
FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id
JOIN pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
GROUP BY pizza_name
ORDER BY total_quantity DESC
LIMIT 5;

-- 4. Which pizza size contributes the most to total revenue
SELECT 
    p.size,
    ROUND(SUM(od.quantity * p.price), 2) AS revenue
FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id
GROUP BY p.size
ORDER BY revenue DESC;

-- 5. Category-wise pizza sales and revenue
SELECT 
    pt.category,
    SUM(od.quantity) AS total_sales,
    ROUND(SUM(od.quantity * p.price), 2) AS total_revenue
FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id
JOIN pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
GROUP BY pt.category
ORDER BY total_revenue DESC;

-- 6. Most frequently used ingredients in best-selling pizzas
WITH top_pizzas AS (
    SELECT p.pizza_type_id
    FROM order_details od
    JOIN pizzas p ON od.pizza_id = p.pizza_id
    GROUP BY p.pizza_type_id
    ORDER BY SUM(od.quantity) DESC
    LIMIT 10
)
SELECT ingredient, COUNT(*) AS frequency
FROM (
    SELECT TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(pt.ingredients, ',', n.n), ',', -1)) AS ingredient
    FROM pizza_types pt
    JOIN top_pizzas tp ON pt.pizza_type_id = tp.pizza_type_id
    JOIN (
        SELECT 1 n UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 
        UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION SELECT 10
    ) n
    ON CHAR_LENGTH(pt.ingredients) - CHAR_LENGTH(REPLACE(pt.ingredients, ',', '')) >= n.n - 1
) ingredients_split
GROUP BY ingredient
ORDER BY frequency DESC;

-- 7. Number of orders per day of the week
SELECT 
    DAYNAME(o.date) AS day_of_week,
    COUNT(DISTINCT o.order_id) AS total_orders
FROM orders o
GROUP BY day_of_week
ORDER BY FIELD(day_of_week, 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday');

-- 8. Top 3 pizzas by revenue in each category
WITH pizza_revenue AS (
    SELECT 
        pt.category,
        pt.name AS pizza_name,
        SUM(od.quantity * p.price) AS revenue
    FROM order_details od
    JOIN pizzas p ON od.pizza_id = p.pizza_id
    JOIN pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
    GROUP BY pt.category, pt.name
),
ranked_pizzas AS (
    SELECT *, RANK() OVER (PARTITION BY category ORDER BY revenue DESC) AS rk
    FROM pizza_revenue
)
SELECT category, pizza_name, ROUND(revenue, 2) AS revenue
FROM ranked_pizzas
WHERE rk <= 3;

-- 9. Average order size (number of pizzas per order)
SELECT ROUND(AVG(pizza_count), 2) AS avg_order_size
FROM (
    SELECT order_id, SUM(quantity) AS pizza_count
    FROM order_details
    GROUP BY order_id
) sub;

-- 10. Peak hours of ordering
SELECT 
    HOUR(o.time) AS hour,
    COUNT(DISTINCT o.order_id) AS total_orders
FROM orders o
GROUP BY hour
ORDER BY total_orders DESC
LIMIT 3;

-- 11. What is the average revenue per order?
SELECT ROUND(SUM(od.quantity * p.price) / COUNT(DISTINCT o.order_id), 2) AS avg_revenue_per_order
FROM order_details od
JOIN orders o ON od.order_id = o.order_id
JOIN pizzas p ON od.pizza_id = p.pizza_id;

-- 12. What are the top 5 revenue-generating days?
SELECT o.date, ROUND(SUM(od.quantity * p.price), 2) AS revenue
FROM orders o
JOIN order_details od ON o.order_id = od.order_id
JOIN pizzas p ON od.pizza_id = p.pizza_id
GROUP BY o.date
ORDER BY revenue DESC
LIMIT 5;

-- 13. Which pizza types are not selling well (low sales volume)?
SELECT pt.name AS pizza_name, SUM(od.quantity) AS total_sold
FROM pizza_types pt
JOIN pizzas p ON pt.pizza_type_id = p.pizza_type_id
LEFT JOIN order_details od ON p.pizza_id = od.pizza_id
GROUP BY pt.name
ORDER BY total_sold ASC
LIMIT 5;

-- 14. Revenue comparison between weekdays and weekends
SELECT 
    CASE 
        WHEN DAYOFWEEK(o.date) IN (1, 7) THEN 'Weekend'
        ELSE 'Weekday'
    END AS day_type,
    ROUND(SUM(od.quantity * p.price), 2) AS total_revenue
FROM orders o
JOIN order_details od ON o.order_id = od.order_id
JOIN pizzas p ON od.pizza_id = p.pizza_id
GROUP BY day_type;

-- 15. How many unique pizzas are sold per category?
SELECT pt.category, COUNT(DISTINCT p.pizza_id) AS unique_pizzas_sold
FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id
JOIN pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
GROUP BY pt.category;

-- 16. Revenue contribution of each ingredient
WITH pizza_sales AS (
  SELECT p.pizza_type_id, SUM(od.quantity * p.price) AS revenue
  FROM order_details od
  JOIN pizzas p ON od.pizza_id = p.pizza_id
  GROUP BY p.pizza_type_id
),
ingredient_split AS (
  SELECT 
    ps.revenue,
    TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(pt.ingredients, ',', n.n), ',', -1)) AS ingredient
  FROM pizza_types pt
  JOIN pizza_sales ps ON pt.pizza_type_id = ps.pizza_type_id
  JOIN (
    SELECT 1 AS n UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5
    UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION SELECT 10
  ) n ON CHAR_LENGTH(pt.ingredients) - CHAR_LENGTH(REPLACE(pt.ingredients, ',', '')) >= n.n - 1
)
SELECT ingredient, ROUND(SUM(revenue), 2) AS total_revenue
FROM ingredient_split
GROUP BY ingredient
ORDER BY total_revenue DESC
LIMIT 10;

-- 17. What is the total quantity of pizzas sold per month?
SELECT DATE_FORMAT(o.date, '%Y-%m') AS month, SUM(od.quantity) AS total_quantity
FROM orders o
JOIN order_details od ON o.order_id = od.order_id
GROUP BY month
ORDER BY month;

-- 18. What is the sales performance of each pizza size by month?
SELECT 
    DATE_FORMAT(o.date, '%Y-%m') AS month,
    p.size,
    ROUND(SUM(od.quantity * p.price), 2) AS revenue
FROM orders o
JOIN order_details od ON o.order_id = od.order_id
JOIN pizzas p ON od.pizza_id = p.pizza_id
GROUP BY month, p.size
ORDER BY month, revenue DESC;
